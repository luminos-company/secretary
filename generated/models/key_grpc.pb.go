// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: models/key.proto

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyServiceClient is the client API for KeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyServiceClient interface {
	Create(ctx context.Context, in *KeyServiceCreateRequest, opts ...grpc.CallOption) (*KeyServiceCreateResponse, error)
	Get(ctx context.Context, in *KeyServiceGetRequest, opts ...grpc.CallOption) (*KeyServiceGetResponse, error)
	GetOrCreate(ctx context.Context, in *KeyServiceGetOrCreateRequest, opts ...grpc.CallOption) (*KeyServiceGetOrCreateResponse, error)
	List(ctx context.Context, in *KeyServiceListRequest, opts ...grpc.CallOption) (*KeyServiceListResponse, error)
	Sign(ctx context.Context, in *KeyServiceSignRequest, opts ...grpc.CallOption) (*KeyServiceSignResponse, error)
	Verify(ctx context.Context, in *KeyServiceVerifyRequest, opts ...grpc.CallOption) (*KeyServiceVerifyResponse, error)
	Crypt(ctx context.Context, in *KeyServiceCryptRequest, opts ...grpc.CallOption) (*KeyServiceCryptResponse, error)
	Decrypt(ctx context.Context, in *KeyServiceDecryptRequest, opts ...grpc.CallOption) (*KeyServiceDecryptResponse, error)
	Rotate(ctx context.Context, in *KeyServiceRotateRequest, opts ...grpc.CallOption) (*KeyServiceRotateResponse, error)
	Delete(ctx context.Context, in *KeyServiceDeleteRequest, opts ...grpc.CallOption) (*KeyServiceDeleteResponse, error)
	JWK(ctx context.Context, in *KeyServiceJWKRequest, opts ...grpc.CallOption) (*KeyServiceJWKResponse, error)
	JWTSign(ctx context.Context, in *KeyServiceJWTSignRequest, opts ...grpc.CallOption) (*KeyServiceJWTSignResponse, error)
	JWTVerify(ctx context.Context, in *KeyServiceJWTVerifyRequest, opts ...grpc.CallOption) (*KeyServiceJWTVerifyResponse, error)
}

type keyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyServiceClient(cc grpc.ClientConnInterface) KeyServiceClient {
	return &keyServiceClient{cc}
}

func (c *keyServiceClient) Create(ctx context.Context, in *KeyServiceCreateRequest, opts ...grpc.CallOption) (*KeyServiceCreateResponse, error) {
	out := new(KeyServiceCreateResponse)
	err := c.cc.Invoke(ctx, "/models.KeyService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) Get(ctx context.Context, in *KeyServiceGetRequest, opts ...grpc.CallOption) (*KeyServiceGetResponse, error) {
	out := new(KeyServiceGetResponse)
	err := c.cc.Invoke(ctx, "/models.KeyService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) GetOrCreate(ctx context.Context, in *KeyServiceGetOrCreateRequest, opts ...grpc.CallOption) (*KeyServiceGetOrCreateResponse, error) {
	out := new(KeyServiceGetOrCreateResponse)
	err := c.cc.Invoke(ctx, "/models.KeyService/GetOrCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) List(ctx context.Context, in *KeyServiceListRequest, opts ...grpc.CallOption) (*KeyServiceListResponse, error) {
	out := new(KeyServiceListResponse)
	err := c.cc.Invoke(ctx, "/models.KeyService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) Sign(ctx context.Context, in *KeyServiceSignRequest, opts ...grpc.CallOption) (*KeyServiceSignResponse, error) {
	out := new(KeyServiceSignResponse)
	err := c.cc.Invoke(ctx, "/models.KeyService/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) Verify(ctx context.Context, in *KeyServiceVerifyRequest, opts ...grpc.CallOption) (*KeyServiceVerifyResponse, error) {
	out := new(KeyServiceVerifyResponse)
	err := c.cc.Invoke(ctx, "/models.KeyService/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) Crypt(ctx context.Context, in *KeyServiceCryptRequest, opts ...grpc.CallOption) (*KeyServiceCryptResponse, error) {
	out := new(KeyServiceCryptResponse)
	err := c.cc.Invoke(ctx, "/models.KeyService/Crypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) Decrypt(ctx context.Context, in *KeyServiceDecryptRequest, opts ...grpc.CallOption) (*KeyServiceDecryptResponse, error) {
	out := new(KeyServiceDecryptResponse)
	err := c.cc.Invoke(ctx, "/models.KeyService/Decrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) Rotate(ctx context.Context, in *KeyServiceRotateRequest, opts ...grpc.CallOption) (*KeyServiceRotateResponse, error) {
	out := new(KeyServiceRotateResponse)
	err := c.cc.Invoke(ctx, "/models.KeyService/Rotate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) Delete(ctx context.Context, in *KeyServiceDeleteRequest, opts ...grpc.CallOption) (*KeyServiceDeleteResponse, error) {
	out := new(KeyServiceDeleteResponse)
	err := c.cc.Invoke(ctx, "/models.KeyService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) JWK(ctx context.Context, in *KeyServiceJWKRequest, opts ...grpc.CallOption) (*KeyServiceJWKResponse, error) {
	out := new(KeyServiceJWKResponse)
	err := c.cc.Invoke(ctx, "/models.KeyService/JWK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) JWTSign(ctx context.Context, in *KeyServiceJWTSignRequest, opts ...grpc.CallOption) (*KeyServiceJWTSignResponse, error) {
	out := new(KeyServiceJWTSignResponse)
	err := c.cc.Invoke(ctx, "/models.KeyService/JWTSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) JWTVerify(ctx context.Context, in *KeyServiceJWTVerifyRequest, opts ...grpc.CallOption) (*KeyServiceJWTVerifyResponse, error) {
	out := new(KeyServiceJWTVerifyResponse)
	err := c.cc.Invoke(ctx, "/models.KeyService/JWTVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyServiceServer is the server API for KeyService service.
// All implementations must embed UnimplementedKeyServiceServer
// for forward compatibility
type KeyServiceServer interface {
	Create(context.Context, *KeyServiceCreateRequest) (*KeyServiceCreateResponse, error)
	Get(context.Context, *KeyServiceGetRequest) (*KeyServiceGetResponse, error)
	GetOrCreate(context.Context, *KeyServiceGetOrCreateRequest) (*KeyServiceGetOrCreateResponse, error)
	List(context.Context, *KeyServiceListRequest) (*KeyServiceListResponse, error)
	Sign(context.Context, *KeyServiceSignRequest) (*KeyServiceSignResponse, error)
	Verify(context.Context, *KeyServiceVerifyRequest) (*KeyServiceVerifyResponse, error)
	Crypt(context.Context, *KeyServiceCryptRequest) (*KeyServiceCryptResponse, error)
	Decrypt(context.Context, *KeyServiceDecryptRequest) (*KeyServiceDecryptResponse, error)
	Rotate(context.Context, *KeyServiceRotateRequest) (*KeyServiceRotateResponse, error)
	Delete(context.Context, *KeyServiceDeleteRequest) (*KeyServiceDeleteResponse, error)
	JWK(context.Context, *KeyServiceJWKRequest) (*KeyServiceJWKResponse, error)
	JWTSign(context.Context, *KeyServiceJWTSignRequest) (*KeyServiceJWTSignResponse, error)
	JWTVerify(context.Context, *KeyServiceJWTVerifyRequest) (*KeyServiceJWTVerifyResponse, error)
	mustEmbedUnimplementedKeyServiceServer()
}

// UnimplementedKeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyServiceServer struct {
}

func (UnimplementedKeyServiceServer) Create(context.Context, *KeyServiceCreateRequest) (*KeyServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedKeyServiceServer) Get(context.Context, *KeyServiceGetRequest) (*KeyServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKeyServiceServer) GetOrCreate(context.Context, *KeyServiceGetOrCreateRequest) (*KeyServiceGetOrCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreate not implemented")
}
func (UnimplementedKeyServiceServer) List(context.Context, *KeyServiceListRequest) (*KeyServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedKeyServiceServer) Sign(context.Context, *KeyServiceSignRequest) (*KeyServiceSignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedKeyServiceServer) Verify(context.Context, *KeyServiceVerifyRequest) (*KeyServiceVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedKeyServiceServer) Crypt(context.Context, *KeyServiceCryptRequest) (*KeyServiceCryptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Crypt not implemented")
}
func (UnimplementedKeyServiceServer) Decrypt(context.Context, *KeyServiceDecryptRequest) (*KeyServiceDecryptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrypt not implemented")
}
func (UnimplementedKeyServiceServer) Rotate(context.Context, *KeyServiceRotateRequest) (*KeyServiceRotateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rotate not implemented")
}
func (UnimplementedKeyServiceServer) Delete(context.Context, *KeyServiceDeleteRequest) (*KeyServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKeyServiceServer) JWK(context.Context, *KeyServiceJWKRequest) (*KeyServiceJWKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JWK not implemented")
}
func (UnimplementedKeyServiceServer) JWTSign(context.Context, *KeyServiceJWTSignRequest) (*KeyServiceJWTSignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JWTSign not implemented")
}
func (UnimplementedKeyServiceServer) JWTVerify(context.Context, *KeyServiceJWTVerifyRequest) (*KeyServiceJWTVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JWTVerify not implemented")
}
func (UnimplementedKeyServiceServer) mustEmbedUnimplementedKeyServiceServer() {}

// UnsafeKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyServiceServer will
// result in compilation errors.
type UnsafeKeyServiceServer interface {
	mustEmbedUnimplementedKeyServiceServer()
}

func RegisterKeyServiceServer(s grpc.ServiceRegistrar, srv KeyServiceServer) {
	s.RegisterService(&KeyService_ServiceDesc, srv)
}

func _KeyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.KeyService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).Create(ctx, req.(*KeyServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.KeyService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).Get(ctx, req.(*KeyServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_GetOrCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyServiceGetOrCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).GetOrCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.KeyService/GetOrCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).GetOrCreate(ctx, req.(*KeyServiceGetOrCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.KeyService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).List(ctx, req.(*KeyServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyServiceSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.KeyService/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).Sign(ctx, req.(*KeyServiceSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyServiceVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.KeyService/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).Verify(ctx, req.(*KeyServiceVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_Crypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyServiceCryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).Crypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.KeyService/Crypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).Crypt(ctx, req.(*KeyServiceCryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_Decrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyServiceDecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).Decrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.KeyService/Decrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).Decrypt(ctx, req.(*KeyServiceDecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_Rotate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyServiceRotateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).Rotate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.KeyService/Rotate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).Rotate(ctx, req.(*KeyServiceRotateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.KeyService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).Delete(ctx, req.(*KeyServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_JWK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyServiceJWKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).JWK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.KeyService/JWK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).JWK(ctx, req.(*KeyServiceJWKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_JWTSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyServiceJWTSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).JWTSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.KeyService/JWTSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).JWTSign(ctx, req.(*KeyServiceJWTSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_JWTVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyServiceJWTVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).JWTVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.KeyService/JWTVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).JWTVerify(ctx, req.(*KeyServiceJWTVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyService_ServiceDesc is the grpc.ServiceDesc for KeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "models.KeyService",
	HandlerType: (*KeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _KeyService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _KeyService_Get_Handler,
		},
		{
			MethodName: "GetOrCreate",
			Handler:    _KeyService_GetOrCreate_Handler,
		},
		{
			MethodName: "List",
			Handler:    _KeyService_List_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _KeyService_Sign_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _KeyService_Verify_Handler,
		},
		{
			MethodName: "Crypt",
			Handler:    _KeyService_Crypt_Handler,
		},
		{
			MethodName: "Decrypt",
			Handler:    _KeyService_Decrypt_Handler,
		},
		{
			MethodName: "Rotate",
			Handler:    _KeyService_Rotate_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _KeyService_Delete_Handler,
		},
		{
			MethodName: "JWK",
			Handler:    _KeyService_JWK_Handler,
		},
		{
			MethodName: "JWTSign",
			Handler:    _KeyService_JWTSign_Handler,
		},
		{
			MethodName: "JWTVerify",
			Handler:    _KeyService_JWTVerify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "models/key.proto",
}

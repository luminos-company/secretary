// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

package generated

import (
	conversion "github.com/luminos-company/secretary/conversion"
	models "github.com/luminos-company/secretary/generated/models"
	dbmodel "github.com/luminos-company/secretary/generated/models/dbmodel"
	types "github.com/luminos-company/secretary/generated/types"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

type KeyConverterImpl struct{}

func (c *KeyConverterImpl) ToGorm(source *models.Key) *dbmodel.Key {
	var pDbmodelKey *dbmodel.Key
	if source != nil {
		dbmodelKey := c.modelsKeyToDbmodelKey(*source)
		pDbmodelKey = &dbmodelKey
	}
	return pDbmodelKey
}
func (c *KeyConverterImpl) ToModel(source *dbmodel.Key) *models.Key {
	var pModelsKey *models.Key
	if source != nil {
		modelsKey := c.dbmodelKeyToModelsKey(*source)
		pModelsKey = &modelsKey
	}
	return pModelsKey
}
func (c *KeyConverterImpl) dbmodelKeyToModelsKey(source dbmodel.Key) models.Key {
	var modelsKey models.Key
	modelsKey.Id = conversion.ConvertTypesIdToString(source.Id)
	modelsKey.PrivateKey = source.PrivateKey
	modelsKey.PublicKey = source.PublicKey
	modelsKey.ShouldRotate = source.ShouldRotate
	var pString *string
	if source.RotatedFromId != nil {
		xstring := *source.RotatedFromId
		pString = &xstring
	}
	modelsKey.RotatedFromId = pString
	modelsKey.RotateCron = source.RotateCron
	var pTimestamppbTimestamp *timestamppb.Timestamp
	if source.ExpiresAt != nil {
		timestamppbTimestamp := c.typesTimestampToTimestamppbTimestamp(*source.ExpiresAt)
		pTimestamppbTimestamp = &timestamppbTimestamp
	}
	modelsKey.ExpiresAt = pTimestamppbTimestamp
	var pTimestamppbTimestamp2 *timestamppb.Timestamp
	if source.UpdatedAt != nil {
		timestamppbTimestamp2 := c.typesTimestampToTimestamppbTimestamp(*source.UpdatedAt)
		pTimestamppbTimestamp2 = &timestamppbTimestamp2
	}
	modelsKey.UpdatedAt = pTimestamppbTimestamp2
	var pTimestamppbTimestamp3 *timestamppb.Timestamp
	if source.CreatedAt != nil {
		timestamppbTimestamp3 := c.typesTimestampToTimestamppbTimestamp(*source.CreatedAt)
		pTimestamppbTimestamp3 = &timestamppbTimestamp3
	}
	modelsKey.CreatedAt = pTimestamppbTimestamp3
	var pTimestamppbTimestamp4 *timestamppb.Timestamp
	if source.DeletedAt != nil {
		timestamppbTimestamp4 := c.typesDeletedAtToTimestamppbTimestamp(*source.DeletedAt)
		pTimestamppbTimestamp4 = &timestamppbTimestamp4
	}
	modelsKey.DeletedAt = pTimestamppbTimestamp4
	return modelsKey
}
func (c *KeyConverterImpl) modelsKeyToDbmodelKey(source models.Key) dbmodel.Key {
	var dbmodelKey dbmodel.Key
	dbmodelKey.Id = conversion.ConvertStringToTypesId(source.Id)
	dbmodelKey.PrivateKey = source.PrivateKey
	dbmodelKey.PublicKey = source.PublicKey
	dbmodelKey.ShouldRotate = source.ShouldRotate
	var pString *string
	if source.RotatedFromId != nil {
		xstring := *source.RotatedFromId
		pString = &xstring
	}
	dbmodelKey.RotatedFromId = pString
	dbmodelKey.RotateCron = source.RotateCron
	var pTypesTimestamp *types.Timestamp
	if source.ExpiresAt != nil {
		typesTimestamp := c.timestamppbTimestampToTypesTimestamp(*source.ExpiresAt)
		pTypesTimestamp = &typesTimestamp
	}
	dbmodelKey.ExpiresAt = pTypesTimestamp
	var pTypesTimestamp2 *types.Timestamp
	if source.UpdatedAt != nil {
		typesTimestamp2 := c.timestamppbTimestampToTypesTimestamp(*source.UpdatedAt)
		pTypesTimestamp2 = &typesTimestamp2
	}
	dbmodelKey.UpdatedAt = pTypesTimestamp2
	var pTypesTimestamp3 *types.Timestamp
	if source.CreatedAt != nil {
		typesTimestamp3 := c.timestamppbTimestampToTypesTimestamp(*source.CreatedAt)
		pTypesTimestamp3 = &typesTimestamp3
	}
	dbmodelKey.CreatedAt = pTypesTimestamp3
	var pTypesDeletedAt *types.DeletedAt
	if source.DeletedAt != nil {
		typesDeletedAt := c.timestamppbTimestampToTypesDeletedAt(*source.DeletedAt)
		pTypesDeletedAt = &typesDeletedAt
	}
	dbmodelKey.DeletedAt = pTypesDeletedAt
	return dbmodelKey
}
func (c *KeyConverterImpl) timestamppbTimestampToTypesDeletedAt(source timestamppb.Timestamp) types.DeletedAt {
	var typesDeletedAt types.DeletedAt
	return typesDeletedAt
}
func (c *KeyConverterImpl) timestamppbTimestampToTypesTimestamp(source timestamppb.Timestamp) types.Timestamp {
	var typesTimestamp types.Timestamp
	return typesTimestamp
}
func (c *KeyConverterImpl) typesDeletedAtToTimestamppbTimestamp(source types.DeletedAt) timestamppb.Timestamp {
	var timestamppbTimestamp timestamppb.Timestamp
	return timestamppbTimestamp
}
func (c *KeyConverterImpl) typesTimestampToTimestamppbTimestamp(source types.Timestamp) timestamppb.Timestamp {
	var timestamppbTimestamp timestamppb.Timestamp
	return timestamppbTimestamp
}

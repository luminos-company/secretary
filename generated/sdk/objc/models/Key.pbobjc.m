// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: models/key.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "models/Key.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
#import "google/protobuf/Descriptor.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(Key);

#pragma mark - KeyRoot

@implementation KeyRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - KeyRoot_FileDescriptor

static GPBFileDescriptor *KeyRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"models"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Key

@implementation Key

@dynamic id_p;
@dynamic hasExternalId, externalId;
@dynamic privateKey;
@dynamic publicKey;
@dynamic hasShouldRotate, shouldRotate;
@dynamic hasRotatedFromId, rotatedFromId;
@dynamic hasRotateCron, rotateCron;
@dynamic hasExpiresAt, expiresAt;
@dynamic hasUpdatedAt, updatedAt;
@dynamic hasCreatedAt, createdAt;

typedef struct Key__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *externalId;
  NSString *privateKey;
  NSString *publicKey;
  NSString *rotatedFromId;
  NSString *rotateCron;
  GPBTimestamp *expiresAt;
  GPBTimestamp *updatedAt;
  GPBTimestamp *createdAt;
} Key__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Key_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Key__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "externalId",
        .dataTypeSpecific.clazz = Nil,
        .number = Key_FieldNumber_ExternalId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Key__storage_, externalId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "privateKey",
        .dataTypeSpecific.clazz = Nil,
        .number = Key_FieldNumber_PrivateKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Key__storage_, privateKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "publicKey",
        .dataTypeSpecific.clazz = Nil,
        .number = Key_FieldNumber_PublicKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Key__storage_, publicKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shouldRotate",
        .dataTypeSpecific.clazz = Nil,
        .number = Key_FieldNumber_ShouldRotate,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "rotatedFromId",
        .dataTypeSpecific.clazz = Nil,
        .number = Key_FieldNumber_RotatedFromId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Key__storage_, rotatedFromId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rotateCron",
        .dataTypeSpecific.clazz = Nil,
        .number = Key_FieldNumber_RotateCron,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Key__storage_, rotateCron),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expiresAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = Key_FieldNumber_ExpiresAt,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Key__storage_, expiresAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = Key_FieldNumber_UpdatedAt,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Key__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = Key_FieldNumber_CreatedAt,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Key__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Key class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Key__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceCreateRequest

@implementation KeyServiceCreateRequest

@dynamic hasId_p, id_p;
@dynamic hasShouldRotate, shouldRotate;
@dynamic hasRotateCron, rotateCron;
@dynamic hasBits, bits;

typedef struct KeyServiceCreateRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t bits;
  NSString *id_p;
  NSString *rotateCron;
} KeyServiceCreateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceCreateRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceCreateRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shouldRotate",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceCreateRequest_FieldNumber_ShouldRotate,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "rotateCron",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceCreateRequest_FieldNumber_RotateCron,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(KeyServiceCreateRequest__storage_, rotateCron),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bits",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceCreateRequest_FieldNumber_Bits,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(KeyServiceCreateRequest__storage_, bits),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceCreateRequest class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceCreateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceCreateResponse

@implementation KeyServiceCreateResponse

@dynamic hasKey, key;

typedef struct KeyServiceCreateResponse__storage_ {
  uint32_t _has_storage_[1];
  Key *key;
} KeyServiceCreateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.clazz = GPBObjCClass(Key),
        .number = KeyServiceCreateResponse_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceCreateResponse__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceCreateResponse class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceCreateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceGetRequest

@implementation KeyServiceGetRequest

@dynamic id_p;

typedef struct KeyServiceGetRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} KeyServiceGetRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceGetRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceGetRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceGetRequest class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceGetRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceGetResponse

@implementation KeyServiceGetResponse

@dynamic hasKey, key;

typedef struct KeyServiceGetResponse__storage_ {
  uint32_t _has_storage_[1];
  Key *key;
} KeyServiceGetResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.clazz = GPBObjCClass(Key),
        .number = KeyServiceGetResponse_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceGetResponse__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceGetResponse class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceGetResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceGetOrCreateRequest

@implementation KeyServiceGetOrCreateRequest

@dynamic id_p;
@dynamic hasShouldRotate, shouldRotate;
@dynamic hasRotateCron, rotateCron;
@dynamic hasBits, bits;

typedef struct KeyServiceGetOrCreateRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t bits;
  NSString *id_p;
  NSString *rotateCron;
} KeyServiceGetOrCreateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceGetOrCreateRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceGetOrCreateRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shouldRotate",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceGetOrCreateRequest_FieldNumber_ShouldRotate,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "rotateCron",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceGetOrCreateRequest_FieldNumber_RotateCron,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(KeyServiceGetOrCreateRequest__storage_, rotateCron),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bits",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceGetOrCreateRequest_FieldNumber_Bits,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(KeyServiceGetOrCreateRequest__storage_, bits),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceGetOrCreateRequest class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceGetOrCreateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceGetOrCreateResponse

@implementation KeyServiceGetOrCreateResponse

@dynamic hasKey, key;

typedef struct KeyServiceGetOrCreateResponse__storage_ {
  uint32_t _has_storage_[1];
  Key *key;
} KeyServiceGetOrCreateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.clazz = GPBObjCClass(Key),
        .number = KeyServiceGetOrCreateResponse_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceGetOrCreateResponse__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceGetOrCreateResponse class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceGetOrCreateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceListRequest

@implementation KeyServiceListRequest

@dynamic hasFirstId, firstId;

typedef struct KeyServiceListRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *firstId;
} KeyServiceListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "firstId",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceListRequest_FieldNumber_FirstId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceListRequest__storage_, firstId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceListRequest class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceListRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceListResponse

@implementation KeyServiceListResponse

@dynamic keysArray, keysArray_Count;
@dynamic hasLastId, lastId;

typedef struct KeyServiceListResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *keysArray;
  NSString *lastId;
} KeyServiceListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keysArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Key),
        .number = KeyServiceListResponse_FieldNumber_KeysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(KeyServiceListResponse__storage_, keysArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastId",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceListResponse_FieldNumber_LastId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceListResponse__storage_, lastId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceListResponse class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceListResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceSignRequest

@implementation KeyServiceSignRequest

@dynamic id_p;
@dynamic message;

typedef struct KeyServiceSignRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *message;
} KeyServiceSignRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceSignRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceSignRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceSignRequest_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KeyServiceSignRequest__storage_, message),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceSignRequest class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceSignRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceSignResponse

@implementation KeyServiceSignResponse

@dynamic signature;
@dynamic kid;

typedef struct KeyServiceSignResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *signature;
  NSString *kid;
} KeyServiceSignResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "signature",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceSignResponse_FieldNumber_Signature,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceSignResponse__storage_, signature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kid",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceSignResponse_FieldNumber_Kid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KeyServiceSignResponse__storage_, kid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceSignResponse class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceSignResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceVerifyRequest

@implementation KeyServiceVerifyRequest

@dynamic id_p;
@dynamic message;
@dynamic signature;

typedef struct KeyServiceVerifyRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *message;
  NSString *signature;
} KeyServiceVerifyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceVerifyRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceVerifyRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceVerifyRequest_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KeyServiceVerifyRequest__storage_, message),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceVerifyRequest_FieldNumber_Signature,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(KeyServiceVerifyRequest__storage_, signature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceVerifyRequest class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceVerifyRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceVerifyResponse

@implementation KeyServiceVerifyResponse

@dynamic valid;

typedef struct KeyServiceVerifyResponse__storage_ {
  uint32_t _has_storage_[1];
} KeyServiceVerifyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "valid",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceVerifyResponse_FieldNumber_Valid,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceVerifyResponse class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceVerifyResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceCryptRequest

@implementation KeyServiceCryptRequest

@dynamic id_p;
@dynamic message;

typedef struct KeyServiceCryptRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *message;
} KeyServiceCryptRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceCryptRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceCryptRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceCryptRequest_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KeyServiceCryptRequest__storage_, message),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceCryptRequest class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceCryptRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceCryptResponse

@implementation KeyServiceCryptResponse

@dynamic ciphertext;

typedef struct KeyServiceCryptResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *ciphertext;
} KeyServiceCryptResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ciphertext",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceCryptResponse_FieldNumber_Ciphertext,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceCryptResponse__storage_, ciphertext),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceCryptResponse class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceCryptResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceDecryptRequest

@implementation KeyServiceDecryptRequest

@dynamic id_p;
@dynamic ciphertext;

typedef struct KeyServiceDecryptRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *ciphertext;
} KeyServiceDecryptRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceDecryptRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceDecryptRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ciphertext",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceDecryptRequest_FieldNumber_Ciphertext,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KeyServiceDecryptRequest__storage_, ciphertext),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceDecryptRequest class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceDecryptRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceDecryptResponse

@implementation KeyServiceDecryptResponse

@dynamic message;

typedef struct KeyServiceDecryptResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *message;
} KeyServiceDecryptResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "message",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceDecryptResponse_FieldNumber_Message,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceDecryptResponse__storage_, message),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceDecryptResponse class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceDecryptResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceRotateRequest

@implementation KeyServiceRotateRequest

@dynamic id_p;

typedef struct KeyServiceRotateRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} KeyServiceRotateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceRotateRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceRotateRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceRotateRequest class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceRotateRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceRotateResponse

@implementation KeyServiceRotateResponse

@dynamic hasKey, key;

typedef struct KeyServiceRotateResponse__storage_ {
  uint32_t _has_storage_[1];
  Key *key;
} KeyServiceRotateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.clazz = GPBObjCClass(Key),
        .number = KeyServiceRotateResponse_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceRotateResponse__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceRotateResponse class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceRotateResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceDeleteRequest

@implementation KeyServiceDeleteRequest

@dynamic id_p;

typedef struct KeyServiceDeleteRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} KeyServiceDeleteRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceDeleteRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceDeleteRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceDeleteRequest class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceDeleteRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceDeleteResponse

@implementation KeyServiceDeleteResponse


typedef struct KeyServiceDeleteResponse__storage_ {
  uint32_t _has_storage_[1];
} KeyServiceDeleteResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceDeleteResponse class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(KeyServiceDeleteResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceJWKRequest

@implementation KeyServiceJWKRequest

@dynamic id_p;

typedef struct KeyServiceJWKRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} KeyServiceJWKRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceJWKRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceJWKRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceJWKRequest class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceJWKRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyServiceJWKResponse

@implementation KeyServiceJWKResponse

@dynamic jwk;

typedef struct KeyServiceJWKResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *jwk;
} KeyServiceJWKResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "jwk",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyServiceJWKResponse_FieldNumber_Jwk,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyServiceJWKResponse__storage_, jwk),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyServiceJWKResponse class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyServiceJWKResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

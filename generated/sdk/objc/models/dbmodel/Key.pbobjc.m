// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: models/dbmodel/key.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "models/dbmodel/Key.pbobjc.h"
#import "types/Types.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
#import "tagger/Tagger.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(DeletedAt);
GPBObjCClassDeclaration(ID);
GPBObjCClassDeclaration(Timestamp);

#pragma mark - KeyRoot

@implementation KeyRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
    [registry addExtensions:[TaggerRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - KeyRoot_FileDescriptor

static GPBFileDescriptor *KeyRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"models.dbmodel"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Key

@implementation Key

@dynamic hasId_p, id_p;
@dynamic privateKey;
@dynamic publicKey;
@dynamic shouldRotate;
@dynamic hasRotatedFromId, rotatedFromId;
@dynamic rotateCron;
@dynamic hasExpiresAt, expiresAt;
@dynamic hasUpdatedAt, updatedAt;
@dynamic hasCreatedAt, createdAt;
@dynamic hasDeletedAt, deletedAt;

typedef struct Key__storage_ {
  uint32_t _has_storage_[1];
  ID *id_p;
  NSString *privateKey;
  NSString *publicKey;
  NSString *rotatedFromId;
  NSString *rotateCron;
  Timestamp *expiresAt;
  Timestamp *updatedAt;
  Timestamp *createdAt;
  DeletedAt *deletedAt;
} Key__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(ID),
        .number = Key_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Key__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "privateKey",
        .dataTypeSpecific.clazz = Nil,
        .number = Key_FieldNumber_PrivateKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Key__storage_, privateKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "publicKey",
        .dataTypeSpecific.clazz = Nil,
        .number = Key_FieldNumber_PublicKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Key__storage_, publicKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shouldRotate",
        .dataTypeSpecific.clazz = Nil,
        .number = Key_FieldNumber_ShouldRotate,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "rotatedFromId",
        .dataTypeSpecific.clazz = Nil,
        .number = Key_FieldNumber_RotatedFromId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Key__storage_, rotatedFromId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rotateCron",
        .dataTypeSpecific.clazz = Nil,
        .number = Key_FieldNumber_RotateCron,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Key__storage_, rotateCron),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expiresAt",
        .dataTypeSpecific.clazz = GPBObjCClass(Timestamp),
        .number = Key_FieldNumber_ExpiresAt,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Key__storage_, expiresAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(Timestamp),
        .number = Key_FieldNumber_UpdatedAt,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Key__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(Timestamp),
        .number = Key_FieldNumber_CreatedAt,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Key__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deletedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(DeletedAt),
        .number = Key_FieldNumber_DeletedAt,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Key__storage_, deletedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Key class]
                                     rootClass:[KeyRoot class]
                                          file:KeyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Key__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

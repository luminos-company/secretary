syntax = "proto3";

import "tagger/tagger.proto";
import "types/types.proto";
import "google/api/annotations.proto";

package models;

option go_package = "github.com/luminos-company/secretary/generated/models";
option optimize_for = CODE_SIZE;

message Key {
    types.ID ID = 1 [(tagger.tags) = "json:\"id\" gorm:\"primary_key;auto_increment\""];
    string PrivateKey = 2 [(tagger.tags) = "json:\"private_key\" gorm:\"not null\""];
    string PublicKey = 3 [(tagger.tags) = "json:\"public_key\" gorm:\"unique\""];
    bool ShouldRotate = 4 [(tagger.tags) = "json:\"should_rotate\" gorm:\"index\""];
    optional string RotatedFromId = 5 [(tagger.tags) = "json:\"rotated_from_id\" gorm:\"index\""];
    string RotateCron = 6 [(tagger.tags) = "json:\"rotate_cron\" gorm:\"not null\""];
    types.Timestamp CreatedAt = 7 [(tagger.tags) = "json:\"created_at\" gorm:\"index;autoCreateTime; type:timestamptz\""];
    types.Timestamp UpdatedAt = 8 [(tagger.tags) = "json:\"updated_at\" gorm:\"index;autoUpdateTime; type:timestamptz\""];
    types.Timestamp ExpiresAt = 9 [(tagger.tags) = "json:\"expires_at\" gorm:\"index; type:timestamptz\""];
    types.Timestamp DeletedAt = 10 [(tagger.tags) = "json:\"deleted_at\" gorm:\"index; type:timestamptz\""];
}

message KeyCreator {
  bool ShouldRotate = 4;
  types.Timestamp ExpiresAt = 7;
}

message SignRequest {
  types.ID ID = 1;
  string Message = 2;
}

message SignResponse {
  string Message = 1;
  string Signature = 2;
}

message VerifyRequest {
  types.ID ID = 1;
  string Message = 2;
  string Signature = 3;
}

message VerifyResponse {
  string Message = 1;
  bool Verified = 2;
}

message CryptRequest {
  types.ID ID = 1;
  string Message = 2;
}

message CryptResponse {
  string Message = 1;
  string Cipher = 2;
}

message DecryptRequest {
  types.ID ID = 1;
  string Cipher = 2;
}

message DecryptResponse {
  string Message = 1;
  string Cipher = 2;
}

message KeyList {
    repeated Key Keys = 1;
}

message IDList {
    repeated types.ID IDs = 1;
}

service KeyService {
    rpc CreateKey(KeyCreator) returns (Key){
      option (google.api.http).post = "/keys";
    }
    rpc GetKey(types.ID) returns (Key){
      option (google.api.http).get = "/keys/{id}";
    }
    rpc GetKeys(IDList) returns (KeyList){
      option (google.api.http).post = "/keys/list";
    }
    rpc RotateKey(types.ID) returns (Key);
    rpc DeleteKey(types.ID) returns (Key);
    rpc Sign(SignRequest) returns (SignResponse);
    rpc Verify(VerifyRequest) returns (VerifyResponse);
    rpc Crypt(CryptRequest) returns (CryptResponse);
    rpc Decrypt(DecryptRequest) returns (DecryptResponse);
}
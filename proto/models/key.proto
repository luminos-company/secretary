syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/descriptor.proto";

package models;

option go_package = "github.com/luminos-company/secretary/generated/models";
option optimize_for = CODE_SIZE;

message Key {
    string id = 1;
    optional string external_id = 2;
    string private_key = 3;
    string public_key = 4;
    string kid = 5;
    optional bool should_rotate = 6;
    optional string rotated_from_id = 7;
    optional string rotate_cron = 8;
    google.protobuf.Timestamp expires_at = 9;
    google.protobuf.Timestamp updated_at = 10;
    google.protobuf.Timestamp created_at = 11;
}


message KeyServiceCreateRequest {
    optional string id = 1;
    optional bool show_private_key = 2;
    optional bool should_rotate = 3;
    optional string rotate_cron = 4;
    optional int32 bits = 5;
}

message KeyServiceCreateResponse {
    Key key = 1;
}

message KeyServiceGetRequest {
    string id = 1;
    optional bool show_private_key = 2;
}
message KeyServiceGetResponse {
    Key key = 1;
}

message KeyServiceGetOrCreateRequest {
    string id = 1;
    optional bool show_private_key = 2;
    optional bool should_rotate = 3;
    optional string rotate_cron = 4;
    optional int32 bits = 5;
}

message KeyServiceGetOrCreateResponse {
    Key key = 1;
}

message KeyServiceListRequest {
   optional string first_id = 1;
    optional bool show_private_key = 2;
}

message KeyServiceListResponse {
    repeated Key keys = 1;
    optional string last_id = 2;
}

message KeyServiceSignRequest {
    string id = 1;
    string message = 2;
}

message KeyServiceSignResponse {
    string signature = 1;
    string kid = 2;
}

message KeyServiceVerifyRequest {
    string id = 1;
    string message = 2;
    string signature = 3;
}

message KeyServiceVerifyResponse {
    bool valid = 1;
}

message KeyServiceCryptRequest {
    string id = 1;
    string message = 2;
}

message KeyServiceCryptResponse {
    string ciphertext = 1;
}

message KeyServiceDecryptRequest {
    string id = 1;
    string ciphertext = 2;
}

message KeyServiceDecryptResponse {
    string message = 1;
}

message KeyServiceRotateRequest {
    string id = 1;
    optional bool show_private_key = 2;
}

message KeyServiceRotateResponse {
    Key key = 1;
}

message KeyServiceDeleteRequest {
    string id = 1;
}

message KeyServiceDeleteResponse {}

message KeyServiceJWKRequest {
    string id = 1;
}

message KeyServiceJWKResponse {
    string jwk = 1;
}

message KeyServiceJWTSignRequest {
    string id = 1;
    string message = 2;
}

message KeyServiceJWTSignResponse {
    string token = 1;
}

message KeyServiceJWTVerifyRequest {
    string id = 1;
    string token = 2;
}

message KeyServiceJWTVerifyResponse {
    bool valid = 1;
}


service KeyService {
    rpc Create(KeyServiceCreateRequest) returns (KeyServiceCreateResponse) {
        option (google.api.http) = {
            post: "/v1/keys"
            body: "*"
        };
    }
    rpc Get(KeyServiceGetRequest) returns (KeyServiceGetResponse) {
        option (google.api.http) = {
            get: "/v1/keys/{id}"
        };
    }
    rpc GetOrCreate(KeyServiceGetOrCreateRequest) returns (KeyServiceGetOrCreateResponse) {
        option (google.api.http) = {
            post: "/v1/keys/get-or-create"
            body: "*"
        };
    }
    rpc List(KeyServiceListRequest) returns (KeyServiceListResponse) {
        option (google.api.http) = {
            get: "/v1/keys"
        };
    }
    rpc Sign(KeyServiceSignRequest) returns (KeyServiceSignResponse) {
        option (google.api.http) = {
            post: "/v1/keys/{id}/sign"
            body: "*"
        };
    }
    rpc Verify(KeyServiceVerifyRequest) returns (KeyServiceVerifyResponse) {
        option (google.api.http) = {
            post: "/v1/keys/{id}/verify"
            body: "*"
        };
    }
    rpc Crypt(KeyServiceCryptRequest) returns (KeyServiceCryptResponse) {
        option (google.api.http) = {
            post: "/v1/keys/{id}/crypt"
            body: "*"
        };
    }
    rpc Decrypt(KeyServiceDecryptRequest) returns (KeyServiceDecryptResponse) {
        option (google.api.http) = {
            post: "/v1/keys/{id}/decrypt"
            body: "*"
        };
    }
    rpc Rotate(KeyServiceRotateRequest) returns (KeyServiceRotateResponse) {
        option (google.api.http) = {
            post: "/v1/keys/{id}/rotate"
        };
    }
    rpc Delete(KeyServiceDeleteRequest) returns (KeyServiceDeleteResponse) {
        option (google.api.http) = {
            delete: "/v1/keys/{id}"
        };
    }
    rpc JWK(KeyServiceJWKRequest) returns (KeyServiceJWKResponse) {
        option (google.api.http) = {
            get: "/v1/keys/{id}/jwk"
        };
    }
    rpc JWTSign(KeyServiceJWTSignRequest) returns (KeyServiceJWTSignResponse) {
        option (google.api.http) = {
            post: "/v1/keys/{id}/jwt-sign"
            body: "*"
        };
    }
    rpc JWTVerify(KeyServiceJWTVerifyRequest) returns (KeyServiceJWTVerifyResponse) {
        option (google.api.http) = {
            post: "/v1/keys/{id}/jwt-verify"
            body: "*"
        };
    }
}





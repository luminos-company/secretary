syntax = "proto3";

import "types/types.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "tagger/tagger.proto";

package models;

option go_package = "github.com/luminos-company/secretary/generated/models";
option optimize_for = CODE_SIZE;

message Key {
    types.Basic basic = 1 [(tagger.tags) = "gorm:\"embedded;embedded_prefix:\""];
    string private_key = 2 [(tagger.tags) = "json:\"private_key\""];
    string public_key = 3 [(tagger.tags) = "json:\"public_key\""];
    bool should_rotate = 4 [(tagger.tags) = "json:\"should_rotate\" gorm:\"default:false; index; not null\""];
    optional string rotated_from_id = 5 [(tagger.tags) = "json:\"rotated_from_id\" gorm:\"index\""];
    string rotate_cron = 6 [(tagger.tags) = "json:\"rotate_cron\" gorm:\"default:'0 0 0 1 * *'\""];
    types.Timestamp expires_at = 9 [(tagger.tags) = "json:\"expires_at\" gorm:\"index; type:timestamptz\""];
}


message KeyServiceCreateRequest {
    string private_key = 1;
    string public_key = 2;
    bool should_rotate = 3;
    string rotate_cron = 4;
}
message KeyServiceCreateResponse {
    Key key = 1;
}

message KeyServiceGetRequest {
    string id = 1;
}
message KeyServiceGetResponse {
    Key key = 1;
}

message KeyServiceListRequest {
    types.Pagination pagination = 1;
}

message KeyServiceListResponse {
    repeated Key keys = 1;
    types.Pagination pagination = 2;
}

message KeyServiceSignRequest {
    string id = 1;
    string message = 2;
}

message KeyServiceSignResponse {
    string signature = 1;
}

message KeyServiceVerifyRequest {
    string id = 1;
    string message = 2;
    string signature = 3;
}

message KeyServiceVerifyResponse {
    bool valid = 1;
}

message KeyServiceCryptoRequest {
    string id = 1;
    string message = 2;
}

message KeyServiceCryptoResponse {
    string ciphertext = 1;
}

message KeyServiceDecryptRequest {
    string id = 1;
    string ciphertext = 2;
}

message KeyServiceDecryptResponse {
    string message = 1;
}

message KeyServiceRotateRequest {
    string id = 1;
}

message KeyServiceRotateResponse {
    Key key = 1;
}

message KeyServiceDeleteRequest {
    string id = 1;
}

message KeyServiceDeleteResponse {
    Key key = 1;
}

message KeyServiceJWKRequest {
    string id = 1;
}

message KeyServiceJWKResponse {
    string jwk = 1;
}

service KeyService {
    rpc Create(KeyServiceCreateRequest) returns (KeyServiceCreateResponse) {
        option (google.api.http) = {
            post: "/v1/keys"
            body: "*"
        };
    }
    rpc Get(KeyServiceGetRequest) returns (KeyServiceGetResponse) {
        option (google.api.http) = {
            get: "/v1/keys/{id}"
        };
    }
    rpc List(KeyServiceListRequest) returns (KeyServiceListResponse) {
        option (google.api.http) = {
            get: "/v1/keys"
        };
    }
    rpc Sign(KeyServiceSignRequest) returns (KeyServiceSignResponse) {
        option (google.api.http) = {
            post: "/v1/keys/{id}/sign"
            body: "*"
        };
    }
    rpc Verify(KeyServiceVerifyRequest) returns (KeyServiceVerifyResponse) {
        option (google.api.http) = {
            post: "/v1/keys/{id}/verify"
            body: "*"
        };
    }
    rpc Crypto(KeyServiceCryptoRequest) returns (KeyServiceCryptoResponse) {
        option (google.api.http) = {
            post: "/v1/keys/{id}/crypto"
            body: "*"
        };
    }
    rpc Decrypt(KeyServiceDecryptRequest) returns (KeyServiceDecryptResponse) {
        option (google.api.http) = {
            post: "/v1/keys/{id}/decrypt"
            body: "*"
        };
    }
    rpc Rotate(KeyServiceRotateRequest) returns (KeyServiceRotateResponse) {
        option (google.api.http) = {
            post: "/v1/keys/{id}/rotate"
        };
    }
    rpc Delete(KeyServiceDeleteRequest) returns (KeyServiceDeleteResponse) {
        option (google.api.http) = {
            delete: "/v1/keys/{id}"
        };
    }
    rpc JWK(KeyServiceJWKRequest) returns (KeyServiceJWKResponse) {
        option (google.api.http) = {
            get: "/v1/keys/{id}/jwk"
        };
    }
}




